"==============================================================
" 适合自己使用的vimrc文件，for Linux/Windows, GUI/Console
" 高亮+自动缩进+行号+折叠+优化
" Author:	   wisfern
" Version:     1.0
" 
" Sections:
"		General 
"
" ChangeLog:
"		2011-11-8	This file was created
"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""							
" 返回操作系统类型
function! MySys()
    if has("win16") || has("win32") || has("win64") || has("win95")
        return "windows"
    elseif has("unix")
        return "linux"
    endif
endfunction
" 返回当前目录路径
function! CurDir()
    let curdir = substitute(getcwd(), '/Users/amir/', "~/", "g")
    return curdir
endfunction
" 粘贴模式
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    else
        return ''
    endif
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set rtp+=~/.vim/bundle/vundle/
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

call vundle#end()


set history=700				" 历史记录总行数
set autoread				" 当编辑文档被更改时自动读取变更
set nocompatible            " 关闭 vi 兼容模式
set nobackup                " 覆盖文件时不备份
" set nowb
" set noswapfile
set backupcopy=yes          " 设置备份时的行为为覆盖
set autochdir               " 自动切换当前目录为当前文件所在的目录
" autocmd! bufwritepost vimrc source ~/.vimrc
							" 如果vimrc已经更新，则重新加载
filetype plugin indent on   " 开启插件

" 用户目录变量$VIMFILES
if MySys() == "windows"
    let $VIMFILES = $VIM.'/vimfile'
elseif MySys() == "linux"
    let $VIMFILES = $HOME.'/.vim'
endif

" 设定doc文档目录
let helptags=$VIMFILES.'/doc'

" 设置无限撤销
try
    if MySys() == "windows"
      set undodir=C:\Windows\Temp
    else
      set undodir=~/.vim/undodir
    endif
    set undofile
catch
endtry

" 启动msvim.vim
if MySys() == "windows"
	source $VIMRUNTIME/mswin.vim
	behave mswin
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim UI
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("gui_running")
  set guioptions-=T			" 隐藏GUI工具栏
  set guioptions-=m         " 隐藏菜单栏
  set t_Co=256
  set background=dark		" 设定背景颜色
  "colorscheme peaksea		" 设置GUI颜色方案
else
  colorscheme zellner
  set background=dark
endif
set number                  " 显示行号
set cursorline              " 突出显示当前行
set ruler                   " 打开状态栏标尺
set showcmd                 " 在状态栏显示正在输入的命令
set cmdheight=1             " 设定命令行的行数为 1
set shiftwidth=4            " 设定 << 和 >> 命令移动时的宽度为 4
set softtabstop=4           " 使得按退格键时可以一次删掉 4 个空格
set tabstop=4               " 设定 tab 长度为 4
set ignorecase smartcase    " 搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感
set nowrapscan              " 禁止在搜索到文件两端时重新搜索
set incsearch               " 输入搜索内容时就显示搜索结果
set hlsearch                " 搜索时高亮显示被找到的文本（模式高亮）
set magic                   " 设置魔术，用于正则表达式
set showmatch               " 插入括号时，短暂地跳转到匹配的对应括号
set matchtime=2             " 短暂跳转到匹配括号的时间
set hidden                  " 允许在有未保存的修改时切换缓冲区，此时的修改由 vim 负责保存
set smartindent             " 开启新行时使用智能自动缩进
" set autoindent				" 开启新行时使用自动缩进 
" set wrap 						" 设置折行
set backspace=indent,eol,start whichwrap+=<,>,h,l		
							" 不设定在插入状态无法用退格键和 Delete 键删除回车符
set laststatus=2            " 显示状态栏 (默认值为 1, 无法显示状态栏)
" set statusline=\ %<%F[%1*%M%*%n%R%H]%=\ %y\ %0(%{&fileformat}\ %{&encoding}\ %c:%l/%L%)\ 
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{CurDir()}%h\ \ (%{&fileformat}\ %{&encoding})\ \ Line:\ %l/%L:%c\  
                            " 设置在状态行显示的信息
"set foldenable              " 开始折叠
"set foldmethod=syntax       " 设置语法折叠
"set foldcolumn=0            " 设置折叠区域的宽度
"setlocal foldlevel=1        " 设置折叠层数为
"set foldclose=all           " 设置为自动关闭折叠                            
"nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
                            " 用空格键来开关折叠
set noerrorbells            " 关闭错误信息响铃
set novisualbell            " 关闭使用可视响铃代替呼叫
set t_vb=                   " 置空错误铃声的终端代码
set tm=500

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Fonts and Colors
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" colorscheme molokai         " 设定配色方案
syntax on                   " 自动语法高亮

" 根据操作系统设置字体和颜色
if MySys() == "linux"
  set gfn=Monospace\ 10
  set shell=/bin/bash
elseif MySys() == "windows"
  set gfn=Bitstream\ Vera\ Sans\ Mono:h10
  set guifont=Inconsolata:h11:cANSI
elseif MySys() == "mac"
  set gfn=Menlo:h14
  set shell=/bin/bash
endif

" 配置多语言环境
if has("multi_byte")
    " UTF-8 编码
    set encoding=utf-8
    set termencoding=utf-8
    set formatoptions+=mM
    set fencs=utf-8,gbk

    if v:lang =~? '^\(zh\)\|\(ja\)\|\(ko\)'
        set ambiwidth=double
    endif

    if has("win32")
        source $VIMRUNTIME/delmenu.vim
        source $VIMRUNTIME/menu.vim
        language messages zh_CN.utf-8
    endif
else
    echoerr "Sorry, this version of (g)vim was not compiled with +multi_byte"
endif

try
    lang zh_CN.UTF-8
catch
endtry

set ffs=unix,dos,mac 		" 设定默认的字体类型
                            
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Keyboard shortcuts and map leader
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader = ","			" 设置字符界面主热键
let g:mapleader = ","		" 设置GUI的主热键
nmap <leader>w :w!<cr>		" 快捷键 ,+w 保存当前文件
map <leader>e :e! ~/.vimrc<cr>
							" 快速编译vim配置文件
" Buffers操作快捷方式!
nnoremap <C-RETURN> :bnext<CR>
nnoremap <C-S-RETURN> :bprevious<CR>

" Tab操作快捷方式!
nnoremap <C-TAB> :tabnext<CR>
nnoremap <C-S-TAB> :tabprev<CR>

"关于tab的快捷键
" map tn :tabnext<cr>
" map tp :tabprevious<cr>
" map td :tabnew .<cr>
" map te :tabedit
" map tc :tabclose<cr>

"窗口分割时,进行切换的按键热键需要连接两次,比如从下方窗口移动
"光标到上方窗口,需要<c-w><c-w>k,非常麻烦,现在重映射为<c-k>,切换的
"时候会变得非常方便.
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

"一些不错的映射转换语法（如果在一个文件中混合了不同语言时有用）
nnoremap <leader>1 :set filetype=cpp<CR>
nnoremap <leader>2 :set filetype=c<CR>
nnoremap <leader>3 :set filetype=php<CR>
nnoremap <leader>4 :set filetype=xhtml<CR>
nnoremap <leader>5 :set filetype=css<CR>
nnoremap <leader>6 :set filetype=javascript<CR>

" set fileformats=unix,dos,mac
" nmap <leader>fd :se fileformat=dos<CR>
" nmap <leader>fu :se fileformat=unix<CR>

" use Ctrl+[l|n|p|cc] to list|next|previous|jump to count the result
" map <C-x>l <ESC>:cl<CR>
" map <C-x>n <ESC>:cn<CR>
" map <C-x>p <ESC>:cp<CR>
" map <C-x>c <ESC>:cc<CR>

" CTRL-X and SHIFT-Del are Cut
"vnoremap <C-X> "+x
"vnoremap <S-Del> "+x

" CTRL-C and CTRL-Insert are Copy
"vnoremap <C-C> "+y
"vnoremap <C-Insert> "+y

" CTRL-V and SHIFT-Insert are Paste
" map <C-V>		"+gP
"map <S-Insert>		"+gP

"cmap <C-V>		<C-R>+
"cmap <S-Insert>		<C-R>+

" Pasting blockwise and linewise selections is not possible in Insert and
" Visual mode without the +virtualedit feature.  They are pasted as if they
" were characterwise instead.
" Uses the paste.vim autoload script.

"exe 'inoremap <script> <C-V>' paste#paste_cmd['i']
"exe 'vnoremap <script> <C-V>' paste#paste_cmd['v']

"imap <S-Insert>		<C-V>
"vmap <S-Insert>		<C-V>

" Use CTRL-Q to do what CTRL-V used to do
"noremap <C-Q>		<C-V>

" Use CTRL-S for saving, also in Insert mode
noremap <C-S>		:update<CR>
vnoremap <C-S>		<C-C>:update<CR>
inoremap <C-S>		<C-O>:update<CR>

" For CTRL-V to work autoselect must be off.
" On Unix we have two selections, autoselect can be used.
if !has("unix")
  set guioptions-=a
endif

" CTRL-Z is Undo; not in cmdline though
noremap <C-Z> u
inoremap <C-Z> <C-O>u

" CTRL-Y is Redo (although not repeat); not in cmdline though
noremap <C-Y> <C-R>
inoremap <C-Y> <C-O><C-R>

" Alt-Space is System menu
if has("gui")
  noremap <M-Space> :simalt ~<CR>
  inoremap <M-Space> <C-O>:simalt ~<CR>
  cnoremap <M-Space> <C-C>:simalt ~<CR>
endif

" CTRL-A is Select all
noremap <C-A> gggH<C-O>G
inoremap <C-A> <C-O>gg<C-O>gH<C-O>G
cnoremap <C-A> <C-C>gggH<C-O>G
onoremap <C-A> <C-C>gggH<C-O>G
snoremap <C-A> <C-C>gggH<C-O>G
xnoremap <C-A> <C-C>ggVG

" CTRL-Tab is Next window
noremap <C-Tab> <C-W>w
inoremap <C-Tab> <C-O><C-W>w
cnoremap <C-Tab> <C-C><C-W>w
onoremap <C-Tab> <C-C><C-W>w

" CTRL-F4 is Close window
noremap <C-F4> <C-W>c
inoremap <C-F4> <C-O><C-W>c
cnoremap <C-F4> <C-C><C-W>c
onoremap <C-F4> <C-C><C-W>c
							
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""	
"------------------------------------
" ctags
" Ctrl+]，跳到定义
" Ctrl+T，Ctrl+]的反操作
"------------------------------------

"------------------------------------
" bufexplorer.vim Buffers切换
" \be 全屏方式查看全部打开的文件列表
" \bv 左右方式查看   \bs 上下方式查看
"------------------------------------

"------------------------------------
" taglist.vim  查看函数列表，需要ctags程序
" F4 打开隐藏taglist窗口
"------------------------------------
if MySys() == "windows"                " 设定windows系统中ctags程序的位置
    let Tlist_Ctags_Cmd = '"'.$VIMRUNTIME.'/ctags.exe"'
elseif MySys() == "linux"              " 设定windows系统中ctags程序的位置
    let Tlist_Ctags_Cmd = '/usr/bin/ctags'
endif
nnoremap <silent><F4> :TlistToggle<CR>
let Tlist_Show_One_File = 1            " 不同时显示多个文件的tag，只显示当前文件的
let Tlist_Exit_OnlyWindow = 1          " 如果taglist窗口是最后一个窗口，则退出vim
let Tlist_Use_Right_Window = 1         " 在右侧窗口中显示taglist窗口
let Tlist_File_Fold_Auto_Close=1       " 自动折叠当前非编辑文件的方法列表
let Tlist_Auto_Open = 0
let Tlist_Auto_Update = 1
let Tlist_Hightlight_Tag_On_BufEnter = 1
let Tlist_Enable_Fold_Column = 0
let Tlist_Process_File_Always = 1
let Tlist_Display_Prototype = 0
let Tlist_Compact_Format = 1

"------------------------------------
" mark.vim 给各种tags标记不同的颜色，便于观看调式的插件。
" \m  mark or unmark the word under (or before) the cursor
" \r  manually input a regular expression. 用于搜索.
" \n  clear this mark (i.e. the mark under the cursor), or clear all highlighted marks .
" \*  当前MarkWord的下一个     \#  当前MarkWord的上一个
" \/  所有MarkWords的下一个    \?  所有MarkWords的上一个
"------------------------------------

"------------------------------------
" NERD_tree.vim 以树状方式浏览系统中的文件和目录
" :NERDTree 打开NERD_tree         :NERDTreeClose    关闭NERD_tree
" o 打开关闭文件或者目录         t 在标签页中打开
" T 在后台标签页中打开           ! 执行此文件
" p 到上层目录                   P 到根目录
" K 到第一个节点                 J 到最后一个节点
" u 打开上层目录                 m 显示文件系统菜单（添加、删除、移动操作）
" r 递归刷新当前目录             R 递归刷新当前根目录
"------------------------------------
" F3 NERDTree 切换
map <F3> :NERDTreeToggle<CR>
imap <F3> <ESC>:NERDTreeToggle<CR>

"------------------------------------
" NERD_commenter.vim   注释代码用的，
" [count],cc 光标以下count行逐行添加注释(7,cc)
" [count],cu 光标以下count行逐行取消注释(7,cu)
" [count],cm 光标以下count行尝试添加块注释(7,cm)
" ,cA 在行尾插入 /* */,并且进入插入模式。 这个命令方便写注释。
" 注：count参数可选，无则默认为选中行或当前行
"------------------------------------
let NERDSpaceDelims=1       " 让注释符与语句之间留一个空格
let NERDCompactSexyComs=1   " 多行注释时样子更好看

"------------------------------------
" DoxygenToolkit.vim  
" 由注释生成文档，并且能够快速生成函数标准注释
"------------------------------------
let g:DoxygenToolkit_authorName="Asins - asinsimple AT gmail DOT com"
let g:DoxygenToolkit_briefTag_funcName="yes"
map <leader>da :DoxAuthor<CR>
map <leader>df :Dox<CR>
map <leader>db :DoxBlock<CR>
map <leader>dc a /*  */<LEFT><LEFT><LEFT>

"------------------------------------
" ZenCoding.vim 很酷的插件，HTML代码生成
" 插件最新版：http://www.vim.org/scripts/download_script.php?src_id=16824
" 常用命令可看：http://nootn.com/blog/Tool/23/
"------------------------------------

"------------------------------------
" checksyntax.vim    JavaScript常见语法错误检查
" 默认快捷方式为 F5
"------------------------------------
let g:checksyntax_auto = 0 " 不自动检查

"------------------------------------
" NeoComplCache.vim    自动补全插件
"------------------------------------
let g:AutoComplPop_NotEnableAtStartup = 1
let g:NeoComplCache_EnableAtStartup = 1
let g:NeoComplCache_SmartCase = 1
let g:NeoComplCache_TagsAutoUpdate = 1
let g:NeoComplCache_EnableInfo = 1
let g:NeoComplCache_EnableCamelCaseCompletion = 1
let g:NeoComplCache_MinSyntaxLength = 3
let g:NeoComplCache_EnableSkipCompletion = 1
let g:NeoComplCache_SkipInputTime = '0.5'
let g:NeoComplCache_SnippetsDir = $VIMFILES.'/snippets'
" <TAB> completion.
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
" snippets expand key
imap <silent> <C-e> <Plug>(neocomplcache_snippets_expand)
smap <silent> <C-e> <Plug>(neocomplcache_snippets_expand)

"------------------------------------
" matchit.vim   
" 对%命令进行扩展使得能在嵌套标签和语句之间跳转
" % 正向匹配      g% 反向匹配
" [% 定位块首     ]% 定位块尾
"------------------------------------

"------------------------------------
" vcscommand.vim   对%命令进行扩展使得能在嵌套标签和语句之间跳转
" SVN/git管理工具
"------------------------------------

"------------------------------------
" Alternate a.vim   
" 在对应的头文件和代码文件中快速地切换
" A 在.h和.cpp文件间切换
" AS 纵向切分.h和.cpp文件
" AV 横向切分.h和.cpp文件
" AT 在新Tab中打开对应的.h或.cpp文件
"------------------------------------

"------------------------------------
" omnicppcomplete   
" 在对应的头文件和代码文件中快速地切换
" .或->或<C-X><C-O> 自动弹出可能的补全选项（可以用上下箭头选择）
" <C-N>自动补全
"------------------------------------
map <C-F12> :!$Tlist_Ctags_Cmd -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

"------------------------------------
" Supretab.vim   
" 按tab自动补全
"------------------------------------

"------------------------------------
" csupport
" :h csupport-vim-usage
"------------------------------------
